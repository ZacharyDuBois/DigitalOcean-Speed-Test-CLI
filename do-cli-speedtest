#!/bin/bash
# DigitalOcean Speed Test CLI
# https://github.com/ZacharyDuBois/DigitalOcean-Speed-Test-CLI
version="v0.6.1"

##
# Variables
##

dataCenters=(speedtest-{ams{1..3},fra1,lon1,nyc{1..3},sfo1,sgp1,tor1}.digitalocean.com)
cdnTest="d2qm7ckles1o3d.cloudfront.net"
userAgent="DigitalOcean Speed Test CLI $version - https://github.com/ZacharyDuBois/DigitalOcean-Speed-Test-CLI"
testType=$1
disallowTracking=$2


##
# Message Types
##

fail="[$(tput setaf 1) FAIL $(tput sgr0)]"
ok="[$(tput setaf 2)  OK  $(tput sgr0)]"
running="[$(tput setaf 3)  **  $(tput sgr0)]"
notice="[$(tput setaf 3)NOTICE$(tput sgr0)]"
warn="[$(tput setaf 3) WARN $(tput sgr0)]"
info="[$(tput setaf 6) INFO $(tput sgr0)]"
finish="[$(tput setaf 4) DONE $(tput sgr0)]"

##
# Startup Checks
##

# Check for root
if [[ "$(id -u)" == "0" ]]
then
  echo "$fail Do not run this script as root."
  exit 1
fi

# Check for wget
which wget > /dev/null
checkForWget=$?
if [[ "$checkForWget" != "0" ]]
then
  echo "$fail You need wget to run this script."
  exit 1
fi


##
# Start
##

echo
echo "$info Welcome to the DigitalOcean Speed Test CLI $version."
echo "$info A thing made by Zachary DuBois."
echo "$info Source is available here: https://github.com/ZacharyDuBois/DigitalOcean-Speed-Test-CLI"
echo


##
# Download Test
##

echo "$info All test files are not saved so you don't have to worry about disk space :P"
echo "$running Starting download speedtest..."

# Determine the testType.
if [[ $testType == "100mb" ]] || [[ $testType == "" ]]
then
  downloadFile="100mb.test"
  testType="100mb"
  echo "$info You are running the 100MB test."
elif [[ $testType == "10mb" ]]
then
  downloadFile="10mb.test"
  testType="10mb"
  echo "$info You are running the 10MB test."
else
  echo "$fail The testType was invalid."
  exit 1
fi

if [[ $disallowTracking == false ]] || [[ $disallowTracking == "" ]]
then
  which curl > /dev/null
  checkForCurl=$?
  if [[ "$checkForCurl" != "0" ]]
    then
    echo "$fail You need curl to enable tracking."
    exit 1
  fi
  echo "$notice You have selected not to opt out of tracking. Tracking only counts the number of tests and the test type (and the IP will be logged in the access log, etc)."
  echo "$notice The tracking URL is not called until the very end of the test. If you would like to opt out now, you can simply cancel this script and re-run it with the disallowTracking variable set. See README.md on Github for more information."
elif [[ $disallowTracking == true ]]
then
  echo "$info You have selected to opt out of tracking. The tracking URI should not be called at the end."
else
  echo "$fail Unknown disallowTracking option."
  exit 1
fi

downloadTest() {
  name=$1
  hostname=$2
  ssl=$3

  if [[ $ssl == true ]]
  then
    scheme="https://"
  else
    scheme="http://"
  fi

  echo "$running Running $name download speed test from $scheme$hostname/$downloadFile..."
  speedRaw=$( wget -O /dev/null --user-agent "'$userAgent'" $scheme$hostname/$downloadFile 2>&1 | awk '/\/dev\/null/ {speed=$3 $4} END {gsub(/\(|\)/,"",speed); print speed}' )
  speed="$(tput setaf 2)$speedRaw$(tput sgr0)"
  echo "$ok $name Speed: $speed."
}

for dataCenter in "${dataCenters[@]}"
do
    downloadTest "$(echo "$dataCenter" | awk -F'.' '{ print $1 }' | awk -F'-' '{ print $2 }' | tr '[:lower:]' '[:upper:]')" "$dataCenter" false
done

echo "$info Starting CDN test. Test runs twice to ensure file is in the edge location."
downloadTest "CDN Test 1x" "$cdnTest" true
downloadTest "CDN Test 2x" "$cdnTest" true

echo "$ok Download Speedtest."


##
# Latency Test
##

echo "$running Starting latency test..."
echo "$info This test each datacenter 10 times."
echo "$info If there is any packet loss, it will be printed."

pingTest() {
  name=$1
  hostname=$2
  echo "$running Running $name latency test on $hostname..."
  pingRaw=$(ping -qc 10 -i .5 $hostname)
  avgPingRaw="$(echo "$pingRaw" | awk -F'/' '/^(rtt|round-trip)/ { print $5 }')"
  avgPing="$(tput setaf 2)"$avgPingRaw"ms$(tput sgr0)"
  echo "$ok $name Average Latency: $avgPing."
  pkLossRaw="$(echo "$pingRaw" | awk -F',' '/packet loss/ { print $3 }' | awk -F' ' '{ print $1 }')"
  if ! [[ "$pkLossRaw" =~ ^(0\.0\%|0\%) ]]
  then
    pkLoss=$(tput setaf 2)$pkLossRaw$(tput sgr0)
    echo "$warn $name Packet Loss: $pkLoss."
  fi
}

for dataCenter in "${dataCenters[@]}"
do
    pingTest "$(echo "$dataCenter" | awk -F'.' '{ print $1 }' | awk -F'-' '{ print $2 }' | tr '[:lower:]' '[:upper:]')" "$dataCenter"
done

echo "$ok Latency test."

if [[ $disallowTracking == false ]]
then
  echo "$running Calling tracking URL."
  curl -s "https://we.destroy.tokyo/DOSTCLI-$testType" > /dev/null
  echo "$ok Tracking compleate."
else
  echo "$info Not calling tracking URL."
fi

##
# Done
##

echo
echo "$finish Test complete."

exit 0
