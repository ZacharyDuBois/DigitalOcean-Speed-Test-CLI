#!/bin/bash
# DigitalOcean Speed Test CLI
# https://github.com/ZacharyDuBois/DigitalOcean-Speed-Test-CLI

##
# Syntax
# curl -s https://i.destroy.tokyo/dostcli | bash -s <testType> <disallowTracking> <disableColor>
##
version="v0.7.0"

##
# Variables
##

dataCenters=(speedtest-{ams{1..3},fra1,lon1,nyc{1..3},sfo1,sgp1,tor1}.digitalocean.com)
cdnTest="d2qm7ckles1o3d.cloudfront.net"
userAgent="DigitalOcean Speed Test CLI $version - https://github.com/ZacharyDuBois/DigitalOcean-Speed-Test-CLI"
testType=$1
disallowTracking=$2
disableColor=$3

##
# Message Types
##

if [[ $disableColor == "" ]] || [[ $disableColor == false ]]
then
  fail="[$(tput setaf 1) FAIL $(tput sgr0)]"
  ok="[$(tput setaf 2)  OK  $(tput sgr0)]"
  running="[$(tput setaf 3)  **  $(tput sgr0)]"
  notice="[$(tput setaf 3)NOTICE$(tput sgr0)]"
  warn="[$(tput setaf 3) WARN $(tput sgr0)]"
  info="[$(tput setaf 6) INFO $(tput sgr0)]"
  finish="[$(tput setaf 4) DONE $(tput sgr0)]"
elif [[ $disableColor == true ]]
then
  fail="[ FAIL ]"
  ok="[  OK  ]"
  running="[  **  ]"
  notice="[NOTICE]"
  warn="[ WARN ]"
  info="[ INFO ]"
  finish="[ DONE ]"
else
  echo "Unknown disableColor setting."
  exit 1
fi

##
# Startup Checks
##

# Check for root
if [[ "$(id -u)" == "0" ]]
then
  echo "$fail Do not run this script as root."
  exit 1
fi

# Check for wget
which wget > /dev/null
checkForWget=$?
if [[ "$checkForWget" != "0" ]]
then
  echo "$fail You need wget to run this script."
  exit 1
fi


##
# Start
##

echo
echo "$info Welcome to the DigitalOcean Speed Test CLI $version."
echo "$info A thing made by Zachary DuBois."
echo "$info Source is available here: https://github.com/ZacharyDuBois/DigitalOcean-Speed-Test-CLI"
echo


##
# Download Test
##

# Determine the testType.
if [[ $testType == "100mb" ]] || [[ $testType == "" ]]
then
  downloadFile="100mb.test"
  testType="100mb"
  echo "$info You are running the 100MB test."
elif [[ $testType == "10mb" ]]
then
  downloadFile="10mb.test"
  testType="10mb"
  echo "$info You are running the 10MB test."
else
  echo "$fail The testType was invalid."
  exit 1
fi

if [[ $disallowTracking == false ]] || [[ $disallowTracking == "" ]]
then
  which curl > /dev/null
  checkForCurl=$?
  if [[ "$checkForCurl" != "0" ]]
    then
    echo "$fail You need curl to enable tracking."
    exit 1
  fi
  echo "$notice By default, you are opted-in for just basic tracking (Which test type you picked)."
  echo "$notice The tracking URI is not called until the end. To opt-out, kill this script and look for the propor command on the GitHub README.md."
elif [[ $disallowTracking == true ]]
then
  echo "$info You have selected to opt-out of tracking."
else
  echo "$fail Unknown disallowTracking option."
  exit 1
fi

echo "$running Starting download test..."
downloadTest() {
  name=$1
  hostname=$2
  ssl=$3

  if [[ $ssl == true ]]
  then
    scheme="https://"
  else
    scheme="http://"
  fi

  speed=$( wget -O /dev/null --user-agent "'$userAgent'" $scheme$hostname/$downloadFile 2>&1 | awk '/\/dev\/null/ {speed=$3 $4} END {gsub(/\(|\)/,"",speed); print speed}' )
  echo "$ok $name Speed: $speed."
}

for dataCenter in "${dataCenters[@]}"
do
    downloadTest "$(echo "$dataCenter" | awk -F'.' '{ print $1 }' | awk -F'-' '{ print $2 }' | tr '[:lower:]' '[:upper:]')" "$dataCenter" false
done

echo "$info Starting CDN (AWS Cloudfront) test. Test runs twice to ensure file is in the edge location."
downloadTest "CDN Test 1x" "$cdnTest" true
downloadTest "CDN Test 2x" "$cdnTest" true

##
# Latency Test
##

echo "$running Starting latency test..."
echo "$info 10 Packets are sent. Packetloss will be shown if any."

pingTest() {
  name=$1
  hostname=$2
  pingRaw=$(ping -qc 10 -i .5 $hostname)
  avgPing="$(echo "$pingRaw" | awk -F'/' '/^(rtt|round-trip)/ { print $5 }')"
  echo "$ok $name Average Latency: $avgPing."
  pkLoss="$(echo "$pingRaw" | awk -F',' '/packet loss/ { print $3 }' | awk -F' ' '{ print $1 }')"
  if ! [[ "$pkLoss" =~ ^(0\.0\%|0\%) ]]
  then
    echo "$warn $name Packet Loss: $pkLoss."
  fi
}

for dataCenter in "${dataCenters[@]}"
do
    pingTest "$(echo "$dataCenter" | awk -F'.' '{ print $1 }' | awk -F'-' '{ print $2 }' | tr '[:lower:]' '[:upper:]')" "$dataCenter"
done

if [[ $disallowTracking == false ]] || [[ $disallowTracking == "" ]]
then
  echo "$running Calling tracking URL."
  curl -s "https://we.destroy.tokyo/DOSTCLI-$testType" > /dev/null
  echo "$ok Tracking compleate."
else
  echo "$info Not calling tracking URL."
fi

##
# Done
##

echo
echo "$finish Test complete."

exit 0
